/*
** This program is used to test whether heapsort is stable. We initialize
** the array with records in name string order, then sort it according to
** the number order. If elements sharing the same number order are in string
** order after sorting
*/ 
#include<stdio.h>
#include"item.h"

#define N 10

void heap_sort(item_t *array,int left,int right);
void print_array(item_t *array,int n_elements);
void heapify_top_down(item_t *heap,int k,int n);

void heap_sort(item_t *array,int left,int right)
{
	int n=right-left+1;
	item_t *pq=array+left-1;
	int i,k;

	for(k=n/2;k>=1;k--){
		heapify_top_down(pq,k,n);
	}
	
	for(i=n;i>1;i--){
		swap_item(&pq[1],&pq[i]);
		heapify_top_down(pq,1,i-1);
	}
}

void heapify_top_down(item_t *heap,int k,int n)
{
	int j;

	while(2*k<=n){
		j=2*k;
		if(j+1<=n && compare_item(heap[j+1],heap[j])>0){
			j++;
		}

		if(compare_item(heap[k],heap[j])>=0){
			break;
		}
		swap_item(&heap[k],&heap[j]);
		k=j;
	}
}

void print_array(item_t *array,int n_elements)
{
	int i;

	for(i=0;i<n_elements;i++){
		print_item(array[i]);
		putchar(' ');
	}
	putchar('\n');
}

int main(void)
{
	item_t array[N]={
		{"Adams",1},
		{"Black",2},
		{"Brown",4},
		{"Jackson",2},
		{"Jones",4},
		{"Smith",1},
		{"Thompson",4},
		{"Washington",2},
		{"White",3},
		{"Wilson",3}
	};

	print_array(array,N);

	heap_sort(array,0,N-1);
	print_array(array,N);

	return(0);
}
